# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#

defaults: &defaults
  docker: # run the steps with Docker
    - image: circleci/openjdk:8u181-jdk-stretch
      
  working_directory: ~/repo # directory where repository will be checked-out and steps will run

  environment:
    # Customize the JVM maximum heap limit
    MAVEN_OPTS: -Xmx3200m


version: 2

jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point

    <<: *defaults

    
    steps: # a collection of executable commands
      - add_ssh_keys

      - checkout # check out source code to working directory

      # Download and cache dependencies
      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      # Build 
      - run: mvn -s .circleci/settings.xml -fn -DskipTests dependency:go-offline

      - save_cache: # saves the project dependencies
          name: Dependencies caching
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
        
      # Run tests!
      - run: mvn -s .circleci/settings.xml -Dc8tech.build.test.coverage clean install


      # Deploy if on master branch. If the $RELEASE and $NEXT variables are set then prepare a full maven release.
      - deploy:
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
            
              declare current_tag=$(git tag -l --points-at HEAD || true )
              echo " TAG: ${current_tag}" 

              echo $C8TECH_GPG_KEY | base64 --decode > signing-key
                gpg --pinentry-mode=loopback --passphrase $C8TECH_GPG_PASSPHRASE --import signing-key
                shred signing-key
            
              echo "1234" | gpg --pinentry-mode=loopback --passphrase "${C8TECH_GPG_PASSPHRASE}" -o /dev/null --local-user "${C8TECH_GPG_KEY_ID}" -as - && echo "The correct passphrase was entered for this key"

              echo $C8TECH_KEYSTORE | base64 --decode > $C8TECH_KEYSTORE_FILENAME
              
              if [[ -n "${RELEASE_VERSION}" && -n "${NEXT_VERSION}" ]]; then
                
                echo "starting release for release-version= ${RELEASE_VERSION} next-version= ${NEXT_VERSION}" 
                git config --global user.email "releaser-bot@c8tech.com.br"
                git config --global user.name "c8tech releaser bot"
                mvn -B -s .circleci/settings.xml release:prepare -DdryRun=${C8TECH_RELEASE_DRYRUN} -Darguments="-s .circleci/settings.xml" -Dc8tech.build.release -DreleaseVersion=$RELEASE_VERSION -DdevelopmentVersion=$NEXT_VERSION -DscmCommentPrefix="release: "
              else
                if [[ -n "${current_tag}" && "${current_tag}" == v* ]]; then
                   echo "starting deployment of version= ${current_tag}" 
                   mvn -B -s .circleci/settings.xml deploy -Dc8tech.build.release -Dc8tech.build.test.coverage
                else
                   echo "starting deployment of snaphot version by ${CIRCLE_PROJECT_USERNAME}" 
                   mvn -B -s .circleci/settings.xml deploy -Dc8tech.build.test.coverage
                fi       
              fi
            fi
        
